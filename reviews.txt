----------------------- REVIEW 1 ---------------------

----------- Overall evaluation -----------

  The modeling paradigm lends itself well to the OMH verification. Like any paradigm, it is hard to generalize beyond this case study, but the results are interesting and merit attention as the approach fits so well in the SAL model checker. I might suggest that the term "framework" is too strong for the contribution. It is not clear that the authors have created a "framework" per se but rather a way to model systems inside of SAL. A framework, in my mind, suggests a full blown tool purpose built to support a design paradigm. That seems a stretch for the proof of concept modeling exercise presented.

  A few random thoughts from reading the paper:

  "The framework combines ideas from the literature and folklore to build scalable and modular formal models suitable for infinite-state model-checking, and it reduces the need for ad-hoc abstractions and optimizations." What is "folklore" in this context and how does it relate to the framework? Does it define an aspect of the framework. Also, the introduction and abstract are super vague on the characteristics of this framework: what it looks like, how it works, etc. How is this new framework different from the dozens of other frameworks that claim similar ability? The introduction and abstract shed no light on these questions.

  Maybe introduce the \sigma notation with the \sigma(v) access to the state vector. Also define the \sigma[...] and \sigma^\prime notation for updates and next-state.

  Law 3 for Calendar automaton is unclear. If there exists a single calendar event that is at its timeout, then all future states do not include that event in their calendar, but what if there are multiple calendar events at their timeout? Do all those events fire in a single step? The definition, as I understand it, forces them all to fire otherwise there would exist a successor state that includes on of those several events. Maybe clarify.

  On the definition of faults, send and receive are redefined to return a messages rather than be true/false. For example, recv(i,j,t) = send(i,j,t) is not consistent with the prior definitions that take an additional argument which is the message.

  Where does the set of abstract predicates come from, A_1 \vee ... \vee A_n? That seems to be an important missing piece.


----------------------- REVIEW 2 ---------------------

----------- Overall evaluation -----------

Evaluation:

I agree with authors that the verification itself of the protocol
scaling to a larger number of relays and receivers is already a
contribution. Moreover, the modular combination of the three main
abstractions seems to pay off when the protocol is modified in
different ways.

However, there are several points that authors should address.  As
authors mention, the ideas of calendar automata and abstract
transition systems have been applied already in the past (Dutertre and
Sorea and Rushby). However, it is not clear to me if the idea of
symbolic fault injection is a contribution of this paper or not.

Rushby already verified the OMH protocol but it seems that it scaled
only up to 7 relays and 2 receivers but authors do not explain why
proposed solution is better than Rushby's. Is it simply due to the use
of a different engine (k-induction vs BDD-based model checking?) or
does the modular combination of the three abstractions play an
important role?

Minor typos:

- What is c in the formula just at the beginning of page 4?  Shouldn't
be cal?


----------------------- REVIEW 3 ---------------------

----------- Overall evaluation -----------
The paper is a very nice read, and is very much on topic for NFM. The
modelling methodology is applicable and practical, and the paper
provides a nice blueprint for verification of fault-tolerant systems.
In addition, all SAL models are very nice and available online.
